<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Tony Howell</title>
    <link>http://anthonyrhowell.com/post/</link>
    <description>Recent content in Posts on Tony Howell</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 Feb 2016 13:41:53 -0600</lastBuildDate>
    <atom:link href="http://anthonyrhowell.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>To Mock or Not to Mock: Automated Integration Tests and the Impersonator Pattern</title>
      <link>http://anthonyrhowell.com/post/integration-tests-impersonator-pattern/</link>
      <pubDate>Sat, 13 Feb 2016 13:41:53 -0600</pubDate>
      
      <guid>http://anthonyrhowell.com/post/integration-tests-impersonator-pattern/</guid>
      <description>

&lt;p&gt;One debate that comes up a lot in teams I&amp;rsquo;ve been on in the past is about how &amp;ldquo;real&amp;rdquo; our automated tests should be.&lt;/p&gt;

&lt;p&gt;Usually we all can agree that we need something more than just unit tests. We need a set of tests that
exercise our team&amp;rsquo;s code and modules end to end. Where the rift emerges is what to do about remote 3rd
party APIS.&lt;/p&gt;

&lt;p&gt;The the crux of the debate seems to boil down to this:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How should our automated tests
  interact with external systems (such as a 3rd party REST API)?
  Should we allow the calls to go through to the real thing, or use a test double?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Some of the points that usually come up, all valid:&lt;/p&gt;

&lt;h3 id=&#34;reasons-not-to-use-test-doubles:83d5e732b1c6f9cb8932522304f03bd8&#34;&gt;Reasons not to use test doubles:&lt;/h3&gt;

&lt;p&gt;If you mock that service out, then the tests aren&amp;rsquo;t really &amp;ldquo;real.&amp;rdquo; There is a risk that the tests are invalid,
because assumptions made about how the service will respond were incorrect, or could become out of date.
If it&amp;rsquo;s a REST API, then you need knowledge of what HTTP requests the client is sending to the remote API.&lt;/p&gt;

&lt;p&gt;There is also considerable time to invest in stubbing out the interactions, as well as maintenance to keep the tests up to date.&lt;/p&gt;

&lt;h3 id=&#34;reasons-to-use-a-test-double:83d5e732b1c6f9cb8932522304f03bd8&#34;&gt;Reasons to use a test double&lt;/h3&gt;

&lt;p&gt;On the other hand, if the external system has long running tasks that take seconds or minutes to complete,
I might have to add arbitrary sleeps(), which can lead to brittle tests. They may run much slower, which will decrease
how often we run them.&lt;/p&gt;

&lt;p&gt;If the external system is flaky, I have a suite of flaky tests,
&lt;a href=&#34;http://martinfowler.com/articles/nonDeterminism.html&#34;&gt;which are worse than no tests at all&lt;/a&gt;.
If the interactions result in stateful behavior, then I have to deal with that as well.
If the calls to the external system make stateful changes, then you have to write extra code to setup and teardown as well.&lt;/p&gt;

&lt;p&gt;In retrospect, I think this is a false dichotomy.&lt;/p&gt;

&lt;h3 id=&#34;you-should-do-both:83d5e732b1c6f9cb8932522304f03bd8&#34;&gt;You should do both&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;re building a continuous delivery pipeline, there is room
for both types of tests: A set of fast integration tests with the external systems that interact with stubbed out methods on a test double, and a set of slower running acceptance tests that run against the real thing.&lt;/p&gt;

&lt;p&gt;Most of my thinking on this comes from reading and listening to what Mr. Continuous Delivery himself, &lt;strong&gt;Jez Humble&lt;/strong&gt;, has to say on the matter.&lt;/p&gt;

&lt;p&gt;Jez talks a lot about how your CD pipeline should have several stages, each stage with a set of automated and manual tests that increase confidence that the artifact/code is ready to go to production.&lt;/p&gt;

&lt;p&gt;One very interesting, and under-rated, pattern that he talks &lt;strong&gt;Impersonator Pattern&lt;/strong&gt;. The Impersonator Pattern answers
the mock-or-not question by &lt;em&gt;letting you do both.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-impersonator-pattern:83d5e732b1c6f9cb8932522304f03bd8&#34;&gt;The Impersonator Pattern&lt;/h3&gt;

&lt;p&gt;The Impersonator Pattern (Martin Fowler calls them &lt;a href=&#34;http://martinfowler.com/bliki/SelfInitializingFake.html&#34;&gt;Self Initializing Fakes&lt;/a&gt;) works like this:&lt;/p&gt;

&lt;p&gt;We will proxy the calls to the external system through a middle man.
The first time the call is made, the request will be passed on to the remote system, and transparently pass the response
back to the caller, &lt;em&gt;while recording the interaction&lt;/em&gt;. All subsequent interactions will playback the cached interaction.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://anthonyrhowell.com/media/impersonator_pattern.png&#34; alt=&#34;Credit: Martin Fowler Bliki http://martinfowler.com/bliki/SelfInitializingFake.html&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Credit: Martin Fowler Bliki http://martinfowler.com/bliki/SelfInitializingFake.html
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;This pattern offers a nice compromise.&lt;/p&gt;

&lt;p&gt;First, the interactions are &amp;ldquo;real.&amp;rdquo; I didn&amp;rsquo;t make assumptions about how the external system would respond, but recorded real quests
and responses with the remote service. I also saved a ton of time because I didn&amp;rsquo;t have to manually stub out individual calls to the remote service. I didn&amp;rsquo;t have to waste any time replicating HTTP requests.&lt;/p&gt;

&lt;p&gt;My tests will run faster because I&amp;rsquo;m interacting with a local test double. Because they&amp;rsquo;re so fast, this set of tests could even be run along side unit tests on the developer&amp;rsquo;s laptop, further increasing confidence before checking the code in.&lt;/p&gt;

&lt;p&gt;This set of tests would not replace true end-to-end tests running against the live remote service, but rather supplement them.&lt;/p&gt;

&lt;p&gt;In an upcoming post, I&amp;rsquo;ll share my solution for implementing the Impersonator Pattern in Java with &lt;a href=&#34;http://wiremock.org/&#34;&gt;Wiremock&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Second Post</title>
      <link>http://anthonyrhowell.com/post/post2/</link>
      <pubDate>Fri, 22 Jan 2016 11:16:50 -0600</pubDate>
      
      <guid>http://anthonyrhowell.com/post/post2/</guid>
      <description>&lt;p&gt;Another test&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This is my blog</title>
      <link>http://anthonyrhowell.com/post/welcome/</link>
      <pubDate>Thu, 21 Jan 2016 20:53:08 -0600</pubDate>
      
      <guid>http://anthonyrhowell.com/post/welcome/</guid>
      <description>&lt;p&gt;Hopefully some good stuff will be here in the future.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>