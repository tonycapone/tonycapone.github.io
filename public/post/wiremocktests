+++
date = "2016-02-13T13:41:53-06:00"
draft = true
title = "wiremocktests"

+++

One debate that comes up a lot in teams I've been on is about our "real" our automated tests should be.
Not unit tests, those everyone seems to agree on. I'm talking about our integration/functional/acceptance tests.
Without getting into how to even define those terms, the the crux of the debate comes down to this:

How should tests interact with external systems (such as a 3rd party ReST API).
Should you mock those calls out, or allow the calls to go through to the real thing?

A few months ago I was on a new team where we were deciding how our integration tests
should deal with interactions with our cloud platform. There was some back and forth about this very question.

Some of the points that were brought up, all valid:

If you mock that service out, then the tests aren't really "real." There is a risk that the assumptions made about how
the service will respond were incorrect, or could become out of date. There is also considerable time to invest in stubbing
out the interactions, as well as maintenance to keep the tests up to date.

On the other hand, if the external system has long running tasks that take seconds or minutes to complete, I might have to add arbitrary sleeps(),
which can lead to brittle tests, not to mention increasing the run time of my test suite.
If the external system is flaky, I have a suite of flaky tests,
[which are worse than no tests at all](http://martinfowler.com/articles/nonDeterminism.html).
If the interactions result in stateful behavior, then I have to deal with that as well.

In retrospect, I think this is a false dichotomy. If you're building a continuous delivery pipeline, there is room
for both types of tests: A set of fast integration tests with the external systems mocked out, and a set of slower running
acceptance tests that run against the real thing. In fact, if you're smart about it, you can run both sets of tests from the same code.

Most of my thinking on this comes from reading and listening to what Jez Humble has to say on the matter.
Jez Humble, called the Impersonator Pattern. The way the Impersonator Pattern solves the problem of mocking calls vs
letting them go through to the real thing, is *why not do both?*

The idea (as I interpret it) works like this: We will proxy the calls to the external system through a middle man.
The first time the call is made, the request will be passed on to the external system, and transparently pass the response
back to the caller, *while recording the interaction*. All subsequent interactions will playback the cached interaction.

This pattern offers a nice compromise. First, the interactions are "real."
I didn't make assumptions about how the external system would respond. I also saved a ton of time because I didn't have
to manually stub out individual calls.

As a Java developer, my go to for stubbing out RESTful is [Wiremock](http://wiremock.org/).
